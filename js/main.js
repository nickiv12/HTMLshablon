// ===== 1. ОБЪЯВЛЕНИЕ  ФУНКЦИЙ ==================================

// --- 1. КОНЕЦ ОБЪЯВЛЕНИЕ ФУНКЦИЙ

// ===== 2. ДОКУМЕНТ ГОТОВ  ===========================
$(document).ready(function(){

	// ==== 2.1 ПРОИСХОДИТ ПРИ ЗАГРУЗКЕ ==============================
//	alert(' работает main.js');
	// МОДУЛЬ англ. слов часть 1. - создаем JS-МАССИВ всех англ. слов, имеющих class = 'tp'
	var engWords = [];// создаю массив английских слов находящихся на странице
	var word; // Переменная для записи перебираемых в цикле английских слов
	$('.tp').each(function(indx, elem){  // Получаем ВСЕ  слова с классом tp
		word =  $(elem).text().toLowerCase() ; // записываем английское слово в нижнем регистре в переменную
		word =$.trim(word);//удаляем возможные пробелы слева и справа
//		alert('='+word+'-');
		// заполняем массив англ. словами, которых нет еще в массиве
		if(engWords.indexOf(word) == -1) { // если в массиве нет этого слова
			engWords.push(word);// то добавляем в него новое слово
		}
	});// конец МОДУЛЬ англ. слов часть 1.

	// МОДУЛЬ англ. слов часть 2. - Преобразуем JS массив (созданный в начале) в строку  типа JSON
	var str = JSON.stringify(engWords);// преобразуем массив в JSON
	//Преобразование в такой вид "str=('слово','слово','слово')". Такое преобразование неуклюжее, но пока другое не пришло в голову. Мне нужна именно такая строка для подстановки ее в MySQL запрос.
	str = str.replace(/"/g,"'");//меняем дв.кавычку на одинарную
	str = str.slice(1,-1); // Удаляем квадратные скобки
	str = 'str=('+str+')'; // Добавляем круглые скобки

	// МОДУЛЬ англ. слов часть 3. - AJAX
//	alert(' ПОСЛЕ закрытия окна начнется  запрос AJAX ')
	$.ajax({
	   type: "POST"
		,url: "dictionary/dictionary.php" //  Файл-обрабочик
		,data: str // Данные для отправки
		,success: function(result){ // Дейсвия при удачном полученнии данных
			// Место для вставки скрипта с объектом со словарем к странице
			$("#for-script").html(result);
//			alert(result);
			// Подставление перевода в атрибут data-translate для показа всплывающих подсказок.
			var addToDictionary = []; //создаем массив для добавления в словарь (слов не нашедших перевод)
			var word1;
			$('.tp').each(function(indx, elem){
				word1 = $.trim( $(elem).text().toLowerCase()); // записываем английское слово в нижнем регистре в переменную
				if(word1 in dictionary) {
					$(elem).attr('data-translate',dictionary[word1][0]+' - '+dictionary[word1][1]);
				} // ИНАЧЕ создаем массив отсутствующих переводов слов и отправляем их на сервер noWordTranslate(word);
				else {
					addToDictionary.push(word1);
				}
			});

			// ПЕРЕДАЧА JS массива слов для добавления в словарь на сервер и получение его в PHP-файле МАССИВОМ
			// кусочек кода проверки существует ли путь к файлу, в базе данных в таблице pages
			var wayToPage; // объявляю переменную для записи в нее путь к файлу
			if(window.way !== undefined) wayToPage = way; // путь из БД
			else wayToPage = location.pathname; // путь к локальному файлу
			// ajax запрос к БД
			$.post(
        "dictionary/dic-must-add.php"	//передаем данные на сервер методом POST в файл
   			,{
					'add_words[]': addToDictionary // квадратные скобки после ids  означают что передается массив и php воспримет его как массив
					, 'way_to_page': wayToPage // отправляю путь к странице откуда отправляю данные используя переменную way gj
				}
     		//обработка данных которые вернул сервер
   			,function(result){
//					alert(' добавление неизвестных слов произошло '+result);
  			}
			);
		}// конец success
	});	// конец AJAX - МОДУЛЬ часть 3.

	// МОДУЛЬ англ. слов часть 4. - ПОЛОЖЕНИЕ ::after в зависимости от правого края окна
	$('.tp').hover(function(){
		var elemCoord = this.getBoundingClientRect();// получаем координаты прямоугольника элемента
		if((document.documentElement.clientWidth-elemCoord.right)<250) // Если растояние между правым краем элемента и правого края окна без прокрутки меньше 250px то...
		$(this).addClass('tp-left'); //... сдвинаем влево ::after на 200px
	});
	// --- конец МОДУЛЬ АНГЛИЙСКИХ СЛОВ
// --- 2.1 конец ПРОИСХОДИТ ПРИ ЗАГРУЗКЕ

	// ==== 2.2. ВЕШАЕМ ОБРАБОТЧИКИ НА СОБЫТИЯ ============================

	// смена позиции sidebar
	$('[name = sd-place]').click(function(){
	var a = $(this).attr('id');
		if(a == 'left') $('.main').css('flex-direction', 'row');
		else if(a == 'right') $('.main').css('flex-direction', 'row-reverse');
			//alert(a);
	});

 //РАБОТА с ЦВЕТНЫМ КОДОМ размещена в bgimage-4.js

	// включение-отключение показа всплывающих подсказок
	$('#tip').on('click', function(){
		if($(this).prop('checked') == false) $('.tp').addClass('no-tp');
		else if($(this).prop('checked') == true)	$('.tp').removeClass('no-tp');
	});// конец всплывающих подсказок

});// --- 2. конец ДОКУМЕНТ ГОТОВ

